version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  pre-build:
    description: A check that needs to be done on only one supported Python version
    parameters:
      command-run:
        type: string
    docker:
      # Pick the highest Python 3.x version that pycantonese is known to support
      - image: cimg/python:3.11
        #auth:
        #  username: $DOCKERHUB_USERNAME
        #  password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          command: << parameters.command-run >>

  build-python:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>
        #auth:
        #  username: $DOCKERHUB_USERNAME
        #  password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          # Test that we can build a source distribution that can correctly
          # install from clean slate.
          # "python -m build" creates
          # dist/<pkg-name>-x.y.z.tar.gz and dist/<pkg-name>-x.y.z-py3-none-any.whl
          name: Build source distribution and install package from it
          command: |
              pip install -r dev-requirements.txt && \
              python -m build && \
              pip install dist/`ls dist/ | grep .whl`
      - run:
          name: Show installed Python packages
          command: pip list -v
      - run:
          name: Run python tests
          command: pytest -vv --durations=0 --doctest-modules --junitxml=/tmp/testxml/report.xml tests docs
          no_output_timeout: 20m
      - store_test_results:
          path: /tmp/testxml/

  build-python-win:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: systeminfo
      - run:
          name: Run tests on Windows
          shell: bash.exe
          command: |
            python --version && \
            pip install -r dev-requirements.txt && \
            pip install . && \
            pip list && \
            pytest

workflows:
  version: 2
  build-and-test:
    jobs:
      - pre-build:
          name: flake8
          command-run: |
            pip install -r dev-requirements.txt && \
            flake8 src tests
      - pre-build:
          name: black
          command-run:  |
            pip install -r dev-requirements.txt && \
            black --check src tests
      - pre-build:
          name: twine
          command-run: |
            pip install -r dev-requirements.txt && \
            python -m build && \
            twine check dist/`ls dist/ | grep .tar.gz` && \
            twine check dist/`ls dist/ | grep .whl`
      - pre-build:
          name: safety
          command-run: |
            pip install -e . && \
            pip install safety && \
            safety --version && \
            pip freeze | safety check --stdin
      - pre-build:
          name: bandit
          command-run: |
            pip install --upgrade bandit && \
            bandit --version && \
            bandit -r src -x tests
      - build-python:
          requires:
            - flake8
            - black
            - twine
            - safety
            - bandit
          matrix:
            parameters:
              python-version: ["3.8", "3.9", "3.10", "3.11"]
      - build-python-win:
          requires:
            - flake8
            - black
            - twine
            - safety
            - bandit
